{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Learning Robotics","title":"Welcome to Learning Robotics"},{"location":"#welcome-to-learning-robotics","text":"","title":"Welcome to Learning Robotics"},{"location":"apt-cacher-ng/","text":"Apt cacher ng It is a package to create a local cache of the Debian mirrors. Server To get started you should create a server by installing the package: apt install apt-cacher-ng change the cache directory in the configuration file: vim /etc/apt-cacher-ng/acng.conf In the line of CacheDir choose your directory path. Client Define the client configuration in order to know about the proxy: echo 'Acquire::http { Proxy \"http://<server_ip>:3142\"; }' | sudo tee -a /etc/apt/apt.conf.d/proxy Check your cacher: In the client machine: sudo apt update sudo apt install <package_name> you should be able to see the files in the server machine (according to CacheDir in the acng.conf file).","title":"Apt cacher ng"},{"location":"apt-cacher-ng/#apt-cacher-ng","text":"It is a package to create a local cache of the Debian mirrors.","title":"Apt cacher ng"},{"location":"apt-cacher-ng/#server","text":"To get started you should create a server by installing the package: apt install apt-cacher-ng change the cache directory in the configuration file: vim /etc/apt-cacher-ng/acng.conf In the line of CacheDir choose your directory path.","title":"Server"},{"location":"apt-cacher-ng/#client","text":"Define the client configuration in order to know about the proxy: echo 'Acquire::http { Proxy \"http://<server_ip>:3142\"; }' | sudo tee -a /etc/apt/apt.conf.d/proxy","title":"Client"},{"location":"apt-cacher-ng/#check-your-cacher","text":"In the client machine: sudo apt update sudo apt install <package_name> you should be able to see the files in the server machine (according to CacheDir in the acng.conf file).","title":"Check your cacher:"},{"location":"aptly/","text":"Aptly When trying to update several computers in local network (without internet connection) aptly is a convinient solution. You can either create a mirror of remote repositories or build your desired repository from deb files. Aptly snapshot option allows you to transition your package environment to a new version, or rollback to a previous version. After publishing a snapshot, you can use apt tool in order to install packages. Create a key In your home directory create a GPG2 batch file: cat >~/gpg2_generate_batch_file.txt <<EOF %echo Generating a default key Key-Type: RSA Key-Length: 4096 Name-Real: MyCompanyName Name-Comment: aptly key no passphrase Name-Email: info@mycompanyname.com Expire-Date: 0 %no-protection # Do a commit here, so that we can later print \"done\" :-) %commit %echo done EOF Generate a general key: gpg --batch --gen-key ~/gpg2_generate_batch_file.txt This key will allow us to sign and export our repository. First we need to check our key: ``` gpg --list-key The key will see as follow: ```gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u /home/robokal/.gnupg/pubring.kbx ------------------------------ pub rsa4096 2021-03-20 [SCEA] 152B12FDCCEB6DCD186430F56FBBF490B10AB3CB uid [ultimate] MyCompanyName (aptly key no passphrase) <info@mycompanyname.com> At last, we should export the key: ```gpg --output ~/.aptly/public/key.pub --armor --export 152B12FDCCEB6DCD186430F56FBBF490B10AB3CB ## Publish a reposiroty Create a repository: ```aptly repo create repo_name Add packages to your repository (for deb files): ```aptly repo add repo_name ~/Downloads/folder_name Create a snapshot: ```aptly snapshot create snap_name from repo repo_name Publish the repository, choose the component and the distribution: ```sudo aptly publish snapshot -component=main -distribution=focal snap_name Finally, serve the published repository: ```aptly serve Use the repository In other machine, you can use the published repository to install the packages. First, add the key. Insert the IP of the serve machine: ```wget http://192.168.1.14:8080/key.pub sudo apt-key add key.pub Check your machine keys: ```apt-key list Now you can update your system. Add to the file /etc/apt/sources.list (according to the desired serve IP, distribution and component): deb http://192.168.1.14:8080/ubuntu focal main At last, you can update your machine: sudo apt update sudo apt install <package_name>","title":"Aptly"},{"location":"aptly/#aptly","text":"When trying to update several computers in local network (without internet connection) aptly is a convinient solution. You can either create a mirror of remote repositories or build your desired repository from deb files. Aptly snapshot option allows you to transition your package environment to a new version, or rollback to a previous version. After publishing a snapshot, you can use apt tool in order to install packages.","title":"Aptly"},{"location":"aptly/#create-a-key","text":"In your home directory create a GPG2 batch file: cat >~/gpg2_generate_batch_file.txt <<EOF %echo Generating a default key Key-Type: RSA Key-Length: 4096 Name-Real: MyCompanyName Name-Comment: aptly key no passphrase Name-Email: info@mycompanyname.com Expire-Date: 0 %no-protection # Do a commit here, so that we can later print \"done\" :-) %commit %echo done EOF Generate a general key: gpg --batch --gen-key ~/gpg2_generate_batch_file.txt This key will allow us to sign and export our repository. First we need to check our key: ``` gpg --list-key The key will see as follow: ```gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u /home/robokal/.gnupg/pubring.kbx ------------------------------ pub rsa4096 2021-03-20 [SCEA] 152B12FDCCEB6DCD186430F56FBBF490B10AB3CB uid [ultimate] MyCompanyName (aptly key no passphrase) <info@mycompanyname.com> At last, we should export the key: ```gpg --output ~/.aptly/public/key.pub --armor --export 152B12FDCCEB6DCD186430F56FBBF490B10AB3CB ## Publish a reposiroty Create a repository: ```aptly repo create repo_name Add packages to your repository (for deb files): ```aptly repo add repo_name ~/Downloads/folder_name Create a snapshot: ```aptly snapshot create snap_name from repo repo_name Publish the repository, choose the component and the distribution: ```sudo aptly publish snapshot -component=main -distribution=focal snap_name Finally, serve the published repository: ```aptly serve","title":"Create a key"},{"location":"aptly/#use-the-repository","text":"In other machine, you can use the published repository to install the packages. First, add the key. Insert the IP of the serve machine: ```wget http://192.168.1.14:8080/key.pub sudo apt-key add key.pub Check your machine keys: ```apt-key list Now you can update your system. Add to the file /etc/apt/sources.list (according to the desired serve IP, distribution and component): deb http://192.168.1.14:8080/ubuntu focal main At last, you can update your machine: sudo apt update sudo apt install <package_name>","title":"Use the repository"},{"location":"mkdocs/","text":"Mkdocs MkDocs is a fastand simple static site generator which can help you build your project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Installation Install with pip: pip install mkdocs Create file mkdocs.yml in your project: site_name: <your_site_name> Try to see your site: run with -v to present errors if occure mkdocs -v serve Run: http://127.0.0.1:8000 Plugins search plugin should call once. It is a default plugin and if you declare plugins you should declare search. Create Table In your MarkDown file, create a table as: | First Column | Second Column | Third Column | |---------------|:--------------:|---------------| | Ex1 | Ex2 | Ex3 | In order to center the content, use :---: as shown in Second Column Install the plugin: pip install mkdocs-bootstrap-tables-plugin Add the plugin to mkdocs.yml file: plugins: - search - bootstrap-tables You will get the table as displayed: First Column Second Column Third Column Ex1 Ex2 Ex3 Create Mermaid Graphs In your MarkDown file, create an example graph: graph LR Hello --> MermaidPlugin Install the plugin: pip install mkdocs-mermaid2-plugin Enter to https://www.cdnpkg.com/mermaid/file/mermaid.min.js/ and download the file mermaid.min.js (version 8.6.3) Save the file on project/docs folder. Add the plugin to mkdocs.yml file: plugins: - search - mermaid2 Add the Mermaid library declaration to mkdocs.yml file: extra_javascript: - mermaid.min.js Download from vscode MarketPlace the Markdown Preview Mermaid Support in order to see mermaid graphs on markdown file. Code Reference Install the plugin: pip install mkdocstrings Add the plugin to mkdocs.yml file: plugins: - search - mkdocstrings Add a reference in your MarkDown file: ::: <folder>.<file_name>.<class/function> For example: ::: src.main.func","title":"Mkdocs"},{"location":"mkdocs/#mkdocs","text":"MkDocs is a fastand simple static site generator which can help you build your project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.","title":"Mkdocs"},{"location":"mkdocs/#installation","text":"Install with pip: pip install mkdocs Create file mkdocs.yml in your project: site_name: <your_site_name> Try to see your site: run with -v to present errors if occure mkdocs -v serve Run: http://127.0.0.1:8000","title":"Installation"},{"location":"mkdocs/#plugins","text":"search plugin should call once. It is a default plugin and if you declare plugins you should declare search.","title":"Plugins"},{"location":"mkdocs/#create-table","text":"In your MarkDown file, create a table as: | First Column | Second Column | Third Column | |---------------|:--------------:|---------------| | Ex1 | Ex2 | Ex3 | In order to center the content, use :---: as shown in Second Column Install the plugin: pip install mkdocs-bootstrap-tables-plugin Add the plugin to mkdocs.yml file: plugins: - search - bootstrap-tables You will get the table as displayed: First Column Second Column Third Column Ex1 Ex2 Ex3","title":"Create Table"},{"location":"mkdocs/#create-mermaid-graphs","text":"In your MarkDown file, create an example graph: graph LR Hello --> MermaidPlugin Install the plugin: pip install mkdocs-mermaid2-plugin Enter to https://www.cdnpkg.com/mermaid/file/mermaid.min.js/ and download the file mermaid.min.js (version 8.6.3) Save the file on project/docs folder. Add the plugin to mkdocs.yml file: plugins: - search - mermaid2 Add the Mermaid library declaration to mkdocs.yml file: extra_javascript: - mermaid.min.js Download from vscode MarketPlace the Markdown Preview Mermaid Support in order to see mermaid graphs on markdown file.","title":"Create Mermaid Graphs"},{"location":"mkdocs/#code-reference","text":"Install the plugin: pip install mkdocstrings Add the plugin to mkdocs.yml file: plugins: - search - mkdocstrings Add a reference in your MarkDown file: ::: <folder>.<file_name>.<class/function> For example: ::: src.main.func","title":"Code Reference"}]}